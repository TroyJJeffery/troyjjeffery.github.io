#BlueJ class context
comment0.target=DLinkedList
comment0.text=\r\n\ Responsible\ for\ manipulating\ the\ lists\ values\ and\ orders.\r\n\r\n\ @author\ Troy\ Jeffery\r\n\ @version\ 5/25/2019\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=
comment10.target=void\ deleteLast()
comment10.text=\r\n\ Delete's\ the\ last\ item\ in\ the\ list.\r\n
comment11.params=
comment11.target=void\ deleteFirst()
comment11.text=\r\n\ Deletes\ the\ first\ item\ in\ the\ list.\r\n
comment12.params=
comment12.target=void\ clear()
comment12.text=\r\n\ Deletes\ each\ node\ and\ sets\ the\ lists\ values\ to\ null.\r\n
comment13.params=origin\ steps
comment13.target=Node\ moveForward(Node,\ int)
comment13.text=\r\n\ Takes\ an\ initial\ node,\ gets\ the\ next\ node\ steps\ times\ and\ returns\ the\ new\ object.\r\n\ @param\ origin\ The\ location\ you\ want\ to\ start\ from\ (usually\ start).\r\n\ @param\ steps\ How\ many\ Nodes\ forward\ you\ would\ like\ to\ move.\r\n\ @return\ The\ object\ you\ end\ up\ at\ after\ taking\ the\ steps.\r\n
comment14.params=origin\ steps
comment14.target=Node\ moveBackward(Node,\ int)
comment14.text=\r\n\ Takes\ an\ initial\ node,\ gets\ the\ node\ before\ it\ steps\ times\ and\ returns\ the\ new\ object.\r\n\ @param\ origin\ The\ Node\ you\ want\ to\ start\ from\ (usually\ start).\r\n\ @param\ steps\ The\ amount\ of\ nodes\ backwards\ you\ want\ to\ go.\r\n\ @return\ The\ node\ you\ end\ up\ after\ moving.\r\n
comment15.params=type
comment15.target=boolean\ contains(java.lang.Object)
comment15.text=\r\n\ Takes\ a\ value\ and\ checks\ each\ node\ for\ it's\ existence\ in\ the\ list.\r\n\ -\ This\ is\ removed\ from\ get\ methods\ to\ distinguish\ against\ primary\ methods.\r\n\ @param\ type\ The\ object\ that\ you\ want\ to\ search\ for.\r\n\ @return\ boolean\ True\ if\ found,\ false\ if\ not.\r\n
comment16.params=node
comment16.target=void\ setStart(Node)
comment16.text=\r\n\ Allows\ the\ user\ to\ change\ the\ start\ value\ of\ the\ list.\r\n\ -\ May\ be\ unnecessary.\r\n\ @param\ node\ The\ node\ you\ would\ like\ to\ set\ the\ start\ value\ to.\r\n
comment17.params=node
comment17.target=void\ setEnd(Node)
comment17.text=\r\n\ Allows\ the\ user\ to\ change\ the\ end\ value\ of\ the\ list.\r\n\ -\ May\ be\ unnecessary.\r\n\ @param\ node\ The\ node\ you\ would\ like\ to\ set\ the\ end\ value\ to.\r\n
comment18.params=index
comment18.target=java.lang.Object\ get(int)
comment18.text=\r\n\ Moves\ through\ the\ list\ and\ returns\ the\ object\ at\ the\ index.\r\n\ @param\ index\ Index\ value\ for\ the\ item\ you\ want.\r\n\ @return\ The\ object\ at\ the\ selected\ index\ value.\r\n
comment19.params=
comment19.target=int\ getSize()
comment19.text=\r\n\ Returns\ the\ size\ of\ the\ list.\r\n\ @return\ The\ current\ value\ of\ the\ size\ variable.\r\n
comment2.params=
comment2.target=DLinkedList()
comment20.params=
comment20.target=Node\ getEnd()
comment20.text=\r\n\ Returns\ the\ last\ item\ in\ the\ list.\r\n\ @return\ The\ value\ of\ the\ end\ variable.\r\n\ -\ replaces\ getLast()\r\n
comment21.params=
comment21.target=Node\ getStart()
comment21.text=\r\n\ Returns\ the\ first\ item\ in\ the\ list.\r\n\ @return\ The\ value\ of\ the\ start\ variable.\r\n\ -\ replaces\ getFirst()\r\n
comment22.params=
comment22.target=java.lang.String\ toString()
comment22.text=\r\n\ Returns\ the\ string\ value\ of\ the\ first\ and\ last\ Nodes.\r\n\ @return\ The\ string\ for\ the\ first\ and\ last\ Node.\r\n
comment3.params=type
comment3.target=void\ addFirst(java.lang.Object)
comment3.text=\r\n\ Takes\ an\ object\ and\ sets\ it\ as\ the\ first\ entry\ in\ the\ list.\r\n\ @param\ type\ Object\ to\ insert.\r\n
comment4.params=type
comment4.target=void\ addLast(java.lang.Object)
comment4.text=\r\n\ Takes\ an\ object\ and\ inserts\ it\ at\ the\ end\ of\ the\ list.\r\n\ @param\ type\ The\ item\ to\ be\ inserted.\r\n
comment5.params=type
comment5.target=void\ makeFirst(java.lang.Object)
comment5.text=\r\n\ Helper\ method\ that\ will\ create\ the\ first\ item\ if\ no\ items\ are\ found.\r\n\ @param\ type\ Object\ to\ be\ inserted.\r\n
comment6.params=index\ type
comment6.target=void\ add(int,\ java.lang.Object)
comment6.text=\r\n\ Takes\ an\ object\ and\ puts\ it\ at\ a\ specific\ index.\r\n\ @param\ index\ The\ index\ value\ you\ want\ the\ item\ placed.\r\n\ @param\ type\ The\ object\ to\ insert\ there.\r\n
comment7.params=
comment7.target=void\ deleteOne()
comment7.text=\r\n\ Helper\ method\ that\ removes\ an\ item\ if\ it\ is\ the\ last\ one.\r\n
comment8.params=i
comment8.target=void\ erase(Node)
comment8.text=\r\n\ Set's\ all\ of\ a\ nodes\ values\ to\ null,\ calls\ the\ garbage\ collector\ and\ reduces\ size.\r\n\ Helper\ method\ to\ reduce\ code\ duplication.\r\n\ @param\ i\ The\ node\ to\ be\ erased.\r\n
comment9.params=index
comment9.target=void\ delete(int)
comment9.text=\r\n\ Allows\ the\ user\ to\ remove\ a\ node\ and\ updates\ it's\ neighbors\ pointers.\r\n\ @param\ index\ The\ index\ value\ to\ delete.\r\n
numComments=23
